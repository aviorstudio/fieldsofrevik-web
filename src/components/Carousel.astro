---
import { Image } from 'astro:assets';
import SmallCaps from './SmallCaps.astro';

export interface Props {
  items: Array<{
    src: ImageMetadata;
    name: string;
  }>;
}

const { items } = Astro.props;
---
<div class="carousel-container relative w-full max-w-md mx-auto aspect-square overflow-hidden rounded-2xl min-h-[300px]">
  {items.map((item, index) => (
    <div class="carousel-item absolute inset-0 transition-transform duration-300 ease-in-out z-0" 
         data-index={index}
         style={`transform: translateX(${index === 0 ? '0' : '100%'})`}>
      <Image 
        src={item.src} 
        alt={item.name} 
        width={512}
        height={512}
        format="webp"
        class="w-full h-full object-cover"
      />
    </div>
  ))}
  <!-- Bottom overlay with Coming Soon and navigation buttons -->
  <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-2 sm:p-4 rounded-b-2xl z-10">
    <div class="flex items-center justify-between gap-2">
      <button class="bg-black/50 text-[#d4af37] border-none w-8 h-8 sm:w-10 sm:h-10 cursor-pointer text-lg sm:text-xl rounded-full hover:bg-black/70 transition-colors flex items-center justify-center flex-shrink-0" aria-label="Previous">&lt;</button>
      <h2 class="font-['Cinzel'] text-center m-0 text-[#d4af37] text-sm sm:text-lg md:text-xl [text-shadow:2px_2px_4px_rgba(0,0,0,0.5)]">
        <SmallCaps text="Coming Soon" />
      </h2>
      <button class="bg-black/50 text-[#d4af37] border-none w-8 h-8 sm:w-10 sm:h-10 cursor-pointer text-lg sm:text-xl rounded-full hover:bg-black/70 transition-colors flex items-center justify-center flex-shrink-0" aria-label="Next">&gt;</button>
    </div>
  </div>
</div>

<script>
  function initCarousel() {
    const carouselItems = document.querySelectorAll('.carousel-item');
    console.log('Carousel items found:', carouselItems.length);
    if (carouselItems.length === 0) return;
    
    const container = carouselItems[0].parentElement;
    if (!container) return;
    
    const prevBtn = container.querySelector('button[aria-label="Previous"]');
    const nextBtn = container.querySelector('button[aria-label="Next"]');
    let currentIndex = 0;
    let isTransitioning = false;

    // Initialize all items to be off-screen except the first
    carouselItems.forEach((item, i) => {
      if (i !== 0) {
        item.style.transform = 'translateX(100%)';
      }
    });

    function showItem(newIndex, direction) {
      if (isTransitioning) return;
      isTransitioning = true;

      const currentItem = carouselItems[currentIndex];
      const nextItem = carouselItems[newIndex];

      // Position next item based on direction
      nextItem.style.transition = 'none';
      nextItem.style.transform = direction === 'next' ? 'translateX(100%)' : 'translateX(-100%)';
      
      // Force reflow
      nextItem.offsetHeight;
      
      // Re-enable transition and slide both items
      nextItem.style.transition = '';
      requestAnimationFrame(() => {
        currentItem.style.transform = direction === 'next' ? 'translateX(-100%)' : 'translateX(100%)';
        nextItem.style.transform = 'translateX(0)';
      });

      // Update index after transition
      setTimeout(() => {
        currentIndex = newIndex;
        isTransitioning = false;
      }, 300);
    }

    if (prevBtn) {
      prevBtn.addEventListener('click', () => {
        const newIndex = (currentIndex - 1 + carouselItems.length) % carouselItems.length;
        showItem(newIndex, 'prev');
      });
    }

    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        const newIndex = (currentIndex + 1) % carouselItems.length;
        showItem(newIndex, 'next');
      });
    }
  }

  // Initialize on page load
  document.addEventListener('astro:page-load', initCarousel);
  // Also initialize on DOM ready for initial load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initCarousel);
  } else {
    initCarousel();
  }
</script>